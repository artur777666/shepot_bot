from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import random
from datetime import datetime
from pytz import timezone

API_TOKEN = '7577091795:AAH0u0p827vyGmtBOEgw2_zJ7oN9cyUOKZs'
CHANNEL_ID = '@shepotzvezd_rus'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
user_data = {}

signs = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã",
    "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü",
    "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]



menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", "üåò –õ—É–Ω–∞")
menu_keyboard.add("üÉè –ö–∞—Ä—Ç–∞", "üé≤ –ò–≥—Ä–∞")

buttons = [KeyboardButton(sign) for sign in signs]
for i in range(0, len(buttons), 3):
    key_markup.add(*buttons[i:i+3])

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("‚ú® –Ø ‚Äî –ñ—Ä–∏—Ü–∞ –®—ë–ø–æ—Ç–∞.\n–Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ —Ç–≤–æ–µ–π —Å—É–¥—å–±–µ. –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)

@dp.message_handler(commands=["–≥–æ—Ä–æ—Å–∫–æ–ø"])
async def send_horoscope(message: types.Message):
    user_id = message.from_user.id
    sign = user_data.get(user_id)
    if not sign:
        await message.reply("–¢—ã –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã–ª –∑–Ω–∞–º–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∏–∂–µ.")
    else:
        await message.reply(f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –∏ —è –æ—Ç–≤–µ—á–∞—é. –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∏—â–µ—Ç –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö. –ù–µ —Å–ø–µ—à–∏. –£—Å–ª—ã—à—å.")

@dp.message_handler(commands=["–∫–∞—Ä—Ç–∞"])
async def send_card(message: types.Message):
    cards = {
        "–ü–ª–∞–º—è": "–°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–æ—Å–∏—à—å –≤ —Å–µ–±–µ –∏—Å–∫—Ä—É –ø–µ—Ä–µ–º–µ–Ω. –ù–µ —Ç—É—à–∏ –µ—ë —Å–æ–º–Ω–µ–Ω–∏—è–º–∏.",
        "–¢–µ–Ω—å": "–û—Ç–≤–µ—Ç –Ω–µ —Å–Ω–∞—Ä—É–∂–∏. –û–Ω —Å–ø—Ä—è—Ç–∞–Ω –≤ —Ç–æ–º, –æ—Ç —á–µ–≥–æ —Ç—ã –æ—Ç–≤–æ—Ä–∞—á–∏–≤–∞–ª—Å—è.",
        "–ú–æ—Å—Ç": "–ö—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –¥—É–º–∞–µ—Ç –æ —Ç–µ–±–µ. –ú–æ—Å—Ç –µ—â—ë –Ω–µ —Å–≥–æ—Ä–µ–ª.",
        "–õ–µ—Å": "–¢—ã –∑–∞–±–ª—É–¥–∏–ª—Å—è –≤ –º—ã—Å–ª—è—Ö. –ò—Å—Ç–∏–Ω–∞ –ø—Ä–∏–¥—ë—Ç –ø–æ–∑–∂–µ.",
        "–õ—É–Ω–∞": "–ù–æ—á—å –æ—Ç–∫—Ä–æ–µ—Ç –∑–Ω–∞–∫–∏. –í–Ω–∏–º–∞–Ω–∏–µ –∫ —Å–Ω–∞–º –∏ —Å–ª—É—á–∞–π–Ω—ã–º —Å–ª–æ–≤–∞–º."
    }
    card = random.choice(list(cards.items()))
    await message.reply(f"üÉè –ö–∞—Ä—Ç–∞ —Å—É–¥—å–±—ã: *{card[0]}*\n_{card[1]}_\n\n‚Äî –ñ—Ä–∏—Ü–∞ –®—ë–ø–æ—Ç–∞", parse_mode="Markdown")

@dp.message_handler(commands=["–ª—É–Ω–∞"])
async def lunar_whisper(message: types.Message):
    await message.reply("üåò –°–µ–≥–æ–¥–Ω—è ‚Äî –≤–æ—Å—å–º–æ–π –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å.\n–õ—É–Ω–∞ –≤ –í–µ—Å–∞—Ö. –ë–∞–ª–∞–Ω—Å –≤–∞–∂–Ω–µ–µ –ø—Ä–∞–≤–¥—ã. –î—ã—à–∏ –≥–ª—É–±–∂–µ.\n\n‚Äî –ñ—Ä–∏—Ü–∞ –®—ë–ø–æ—Ç–∞")

@dp.message_handler(commands=["–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"])
async def publish_to_channel(message: types.Message):
    if message.from_user.id == message.chat.id:
        await bot.send_message(CHANNEL_ID, "üîÆ –ü–æ—Å–ª–∞–Ω–∏–µ –ñ—Ä–∏—Ü—ã:\n–°–µ–≥–æ–¥–Ω—è ‚Äî –¥–µ–Ω—å –∏–Ω—Ç—É–∏—Ü–∏–∏.\n–ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –∑–Ω–∞–∫–∞–º –∏ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.")

@dp.message_handler(lambda message: message.text in signs)
async def save_sign(message: types.Message):
    user_data[message.from_user.id] = message.text
    await message.reply(f"‚ú® –¢—ã –≤—ã–±—Ä–∞–ª –∑–Ω–∞–∫ {message.text}.\n–ù–∞–ø–∏—à–∏ /–≥–æ—Ä–æ—Å–∫–æ–ø, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —à–µ–ø—á—É—Ç –∑–≤—ë–∑–¥—ã.")

daily_whispers = [
    "–°–µ–≥–æ–¥–Ω—è —Ç–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –≥—Ä–æ–º—á–µ —Å–ª–æ–≤. –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –ø–∞—É–∑–∞–º.",
    "–¢—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å —Ç–æ–ª—á–æ–∫. –≠—Ç–æ –∑–Ω–∞–∫. –ù–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–π—Å—è –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
    "–ù–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–ª—ã —É–∂–µ –¥–µ–π—Å—Ç–≤—É—é—Ç. –í–µ—Ä—å —Å–≤–æ–µ–º—É —á—É—Ç—å—é.",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤–∞–∂–Ω–æ –Ω–µ —Å–ø–µ—à–∏—Ç—å. –û—Ç–≤–µ—Ç –∏–¥—ë—Ç.",
    "–ü—É—Å—Ç—å —à—ë–ø–æ—Ç –∑–≤—ë–∑–¥ –±—É–¥–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º ‚Äî –¥–∞–∂–µ –≤ —à—É–º–µ –º–∏—Ä–∞."
]

async def scheduled_tasks():
    tz = timezone('Europe/Moscow')
    now = datetime.now(tz)
    whisper = random.choice(daily_whispers)

    try:
            try:
    await bot.send_message(user_id,
        f"üåå *–®—ë–ø–æ—Ç –ñ—Ä–∏—Ü—ã:*\\n_{whisper}_\\n\\n‚Äî t.me/shepotzvezd_rus",
        parse_mode="Markdown")
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à—ë–ø–æ—Ç–∞:", e)


        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª:", e)

    for user_id in user_data:
        try:
            await bot.send_message(user_id,
                f"üåå *–®—ë–ø–æ—Ç –ñ—Ä–∏—Ü—ã:*\n_{whisper}_\n\n‚Äî t.me/shepotzvezd_rus",
                parse_mode="Markdown")
        except:
            continue

async def on_startup(dp):
    scheduler.add_job(send_whispers_only, "cron", hour=9, minute=0, timezone="Europe/Moscow")
    scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


@dp.message_handler(commands=["–∏–≥—Ä–∞"])
async def start_game(message: types.Message):
    await message.reply("üîÆ –Ø —Ä–∞–∑–ª–æ–∂–∏–ª–∞ 5 –∫–∞—Ä—Ç —Å—É–¥—å–±—ã –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π.\n–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É...")

@dp.message_handler(lambda message: message.text in ["1", "2", "3", "4", "5"])
async def reveal_card(message: types.Message):
    responses = {
        "1": "–ö–∞—Ä—Ç–∞ 1 ‚Äî –ü–ª–∞–º—è. –°–µ–≥–æ–¥–Ω—è –≤—Å—ë –Ω–∞—á–Ω—ë—Ç—Å—è —Å –∏—Å–∫—Ä—ã. –ù–µ –±–æ–π—Å—è –∑–∞–≥–æ—Ä–µ—Ç—å—Å—è.",
        "2": "–ö–∞—Ä—Ç–∞ 2 ‚Äî –¢–µ–Ω—å. –û—Ç–≤–µ—Ç —Ä—è–¥–æ–º, –Ω–æ –æ–Ω —Å–∫—Ä—ã—Ç. –°–º–æ—Ç—Ä–∏ –≥–ª—É–±–∂–µ.",
        "3": "–ö–∞—Ä—Ç–∞ 3 ‚Äî –ú–æ—Å—Ç. –ß—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∂–¥—ë—Ç —Ç–≤–æ–µ–≥–æ —à–∞–≥–∞.",
        "4": "–ö–∞—Ä—Ç–∞ 4 ‚Äî –õ–µ—Å. –ü–∞—É–∑–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å –∑–æ–≤ –∏–Ω—Ç—É–∏—Ü–∏–∏.",
        "5": "–ö–∞—Ä—Ç–∞ 5 ‚Äî –õ—É–Ω–∞. –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–Ω–∞–º. –í –Ω–∏—Ö –∏—Å—Ç–∏–Ω–∞."
    }
    await message.reply(f"üåå {responses[message.text]}\n\n‚Äî –ñ—Ä–∏—Ü–∞ –®—ë–ø–æ—Ç–∞")

async def send_whispers_only():
    whisper = random.choice(daily_whispers)
    for user_id in user_data:
        try:
            await bot.send_message(user_id,
                f"üåå *–®—ë–ø–æ—Ç –ñ—Ä–∏—Ü—ã:*\n_{whisper}_\n\n‚Äî t.me/shepotzvezd_rus",
                parse_mode="Markdown")
        except:
            continue

@dp.message_handler(lambda message: message.text == "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø")
async def horoscope_button(message: types.Message):
    await send_horoscope(message)

@dp.message_handler(lambda message: message.text == "üåò –õ—É–Ω–∞")
async def luna_button(message: types.Message):
    await lunar_whisper(message)

@dp.message_handler(lambda message: message.text == "üÉè –ö–∞—Ä—Ç–∞")
async def card_button(message: types.Message):
    await send_card(message)

@dp.message_handler(lambda message: message.text == "üé≤ –ò–≥—Ä–∞")
async def game_button(message: types.Message):
    await start_game(message)
